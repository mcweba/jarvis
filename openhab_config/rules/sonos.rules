import org.joda.time.*
import org.openhab.model.script.actions.Timer

rule "Wohnzimmer change radio station"

when
	Item WZ_Sonos_Change_Radio received command
then
	if (BD_Sonos_State.state == "PLAYING") {
		logInfo("sonos.rules", "stopping radio in Wohnzimmer")
		sendCommand(WZ_Sonos_Control, "PAUSE")
	} else {
	  	BD_Sonos_Volume.sendCommand(11)
	  	Kueche_Sonos_Volume.sendCommand(11)
		if (WZ_Sonos_Change_Radio.state == "SRF3") {
			logInfo("sonos.rules", "changing radio state in Wohnzimmer to SRF 3")
			WZ_Sonos_Radio.sendCommand("SRF 3 99.3 (Adult Contemporary)")
		}

		if (WZ_Sonos_Change_Radio.state == "SwissPop") {
			logInfo("sonos.rules", "changing radio state in Wohnzimmer to SwissPop")
			WZ_Sonos_Radio.sendCommand("Radio Swiss Pop (Top 40/Pop)")
		}
	}
end

rule "Wohnzimmer change volume"

when
	Item WZ_Sonos_Change_Volume received command
then
	var Number currentVolume = BD_Sonos_Volume.state as DecimalType
	var Number change = WZ_Sonos_Change_Volume.state as DecimalType
	var Number newVolume = currentVolume + change
	logInfo("sonos.rules", "changing volume in Wohnzimmer from " + currentVolume + " to " + newVolume)
	BD_Sonos_Volume.sendCommand(newVolume)
end

rule "Badezimmer change radio station"

when
	Item Badezimmer_Sonos_Change_Radio received command
then
	if (Badezimmer_Sonos_State.state == "PLAYING") {
		logInfo("sonos.rules", "stopping radio in Badezimmer")
		sendCommand(Badezimmer_Sonos_Control, "PAUSE")
	} else {
	  	Badezimmer_Sonos_Volume.sendCommand(8)
		if (Badezimmer_Sonos_Change_Radio.state == "SRF3") {
			logInfo("sonos.rules", "changing radio state in Badezimmer to SRF 3")
			Badezimmer_Sonos_Radio.sendCommand("SRF 3 99.3 (Adult Contemporary)")
		}

		if (Badezimmer_Sonos_Change_Radio.state == "SwissPop") {
			logInfo("sonos.rules", "changing radio state in Badezimmer to SwissPop")
			Badezimmer_Sonos_Radio.sendCommand("Radio Swiss Pop (Top 40/Pop)")
		}
	}
end

rule "Badezimmer change volume"

when
	Item Badezimmer_Sonos_Change_Volume received command
then
	var Number currentVolume = Badezimmer_Sonos_Volume.state as DecimalType
	var Number change = Badezimmer_Sonos_Change_Volume.state as DecimalType
	var Number newVolume = currentVolume + change
	logInfo("sonos.rules", "changing volume in Badezimmer from " + currentVolume + " to " + newVolume)
	Badezimmer_Sonos_Volume.sendCommand(newVolume)
end

rule "Levio Wallmote"
when
    Item WM01_Scene received update
then

	Levio_Sonos_Volume.sendCommand(4)

    logInfo("levio button", "Clearing Queue")
    Levio_Sonos_ClearQueue.sendCommand("ON")
    var int sceneNumber = WM01_Scene.state as DecimalType

    switch (sceneNumber) {
        case 1 : {
            logInfo("levio button", "Scene " + sceneNumber + " - Leo Lausemaus Weihnachten")
						Levio_Sonos_Playlist.sendCommand("Levio - Lausemaus Weihnachten")
        }
        case 1.1 :  { // long press
            logInfo("levio button", "Scene " + sceneNumber + " - Stop")
			Levio_Sonos_Stop.sendCommand(OFF)
        }		
		case 2 : {
            logInfo("levio button", "Scene " + sceneNumber + " - Leo Lausemaus Spotify")
            Levio_Sonos_Playlist.sendCommand("Levio - Lausemaus Spotify")
        }
        case 2.1 :  { // long press
            logInfo("levio button", "Scene " + sceneNumber + " - Stop")
			Levio_Sonos_Stop.sendCommand(OFF)
        }		
		case 3 : {
            logInfo("levio button", "Scene " + sceneNumber + " - Dinosaurier")
            Levio_Sonos_Playlist.sendCommand("Levio - Dinosaurier")
        }
        case 3.1 :  { // long press
            logInfo("levio button", "Scene " + sceneNumber + " - Stop")
			Levio_Sonos_Stop.sendCommand(OFF)
        }		
		case 4 : {
			Levio_Sonos_Volume.sendCommand(10)
            logInfo("levio button", "Scene " + sceneNumber + " - Feldberger Hof")
            Levio_Sonos_Playlist.sendCommand("Levio - Feldbergerhof")
        }
        case 4.1 :  { // long press
            logInfo("levio button", "Scene " + sceneNumber + " - Stop")
			Levio_Sonos_Stop.sendCommand(OFF)
        }		
    }

	createTimer(now.plusMinutes(45)) [|
	 	logInfo("levio button", "Sleep Timer reached")
	    Levio_Sonos_Stop.sendCommand(OFF)
	]
end
