import org.joda.time.*
import org.openhab.model.script.actions.Timer
import org.eclipse.smarthome.model.script.ScriptServiceUtil

var Timer timerLevio = null
var String logprefix_levio = "sonos.rules.levio"
var String logprefix_wohnzimmer = "sonos.rules.wz"
var defaultVolume = 5

rule "Levio Aqara Opple music control"
when
    Item Aqara_Opple_Levio_Action received update
then

	var actionOriginal = Aqara_Opple_Levio_Action.state.toString

	if(actionOriginal.contains("release")) return

	var target = transform("MAP", "aqara_opple_levio_items.map", actionOriginal)
	val GenericItem targetItem = ScriptServiceUtil.getItemRegistry?.getItem(target) as GenericItem

	var action = transform("MAP", "aqara_opple_levio_actions.map", actionOriginal)

	var volumeItemName = transform("MAP", "aqara_opple_levio_volume_items.map", actionOriginal)
	if(action != "OFF"){
		if(volumeItemName != ""){
			logInfo(logprefix_levio, "found volume item name: " + volumeItemName)
			val GenericItem volumeItem = ScriptServiceUtil.getItemRegistry?.getItem(volumeItemName) as GenericItem
			if(volumeItem !== null){
				logInfo(logprefix_levio, "setting volume to " + volumeItem.state.toString)
				Levio_Sonos_Volume.sendCommand(volumeItem.state.toString)
			} else {
				logWarn(logprefix_levio, "no volume value found, using default")
				Levio_Sonos_Volume.sendCommand(defaultVolume)
			}		
		} else {
			logWarn(logprefix_levio, "no volume item found for " + actionOriginal)
			logWarn(logprefix_levio, "no volume value found, using default")
			Levio_Sonos_Volume.sendCommand(defaultVolume)		
		}
	}
	
	Levio_Sonos_ClearQueue.sendCommand("ON")

	timerLevio = createTimer(now.plusMinutes(45)) [|
	 	logInfo(logprefix_levio, "sleep timer reached")
	    Levio_Sonos_Stop.sendCommand(OFF)
	]

	if(action != "" && targetItem !== null){
		logInfo(logprefix_levio, "target: " + targetItem.name + ", action: " + action)	
		targetItem.sendCommand(action)
		if(timerLevio != null && action == "OFF") timerLevio.cancel()
	}
end

rule "Wohnzimmer music control"
when
    Item Aqara_Opple_Action received update
then

	var actionOriginal = Aqara_Opple_Action.state.toString

	if(actionOriginal.contains("release")) return

	var target = transform("MAP", "aqara_opple_wohnzimmer_items.map", actionOriginal)
	val GenericItem targetItem = ScriptServiceUtil.getItemRegistry?.getItem(target) as GenericItem

	var action = transform("MAP", "aqara_opple_wohnzimmer_actions.map", actionOriginal)
	if(action != "" && targetItem !== null){
		logInfo(logprefix_wohnzimmer, "target: " + targetItem.name + ", action: " + action)	
		
		val String buttonIndex = actionOriginal.substring(7,8)	

		// on spotify playlist buttons, clear queue first
		if(buttonIndex == "3" || buttonIndex == "4"){
			WZ_Sonos_ClearQueue.sendCommand("ON")
			Kueche_Sonos_ClearQueue.sendCommand("ON")
		}

		switch Aqara_Opple_Action.state.toString
		{
			case "button_5_single": {
				var Number currentVolWohnzimmer = WZ_Sonos_Volume.state as DecimalType
				var Number newVolumeWohnzimmer = currentVolWohnzimmer - 2
				logInfo(logprefix_wohnzimmer, "changing volume in Wohnzimmer from " + currentVolWohnzimmer + " to " + newVolumeWohnzimmer)
				WZ_Sonos_Volume.sendCommand(newVolumeWohnzimmer)
				
				var Number currentVolKueche = Kueche_Sonos_Volume.state as DecimalType
				var Number newVolumeKueche = currentVolKueche - 2
				logInfo(logprefix_wohnzimmer, "changing volume in Küche from " + currentVolKueche + " to " + newVolumeKueche)
				Kueche_Sonos_Volume.sendCommand(newVolumeKueche)
			}
			case "button_5_hold": {
				if (WZ_Sonos_State.state == "PLAYING") {
					logInfo(logprefix_wohnzimmer, "About to pause the music")
					targetItem.sendCommand("PAUSE")
				} else if (WZ_Sonos_State.state == "PAUSED_PLAYBACK"){
					logInfo(logprefix_wohnzimmer, "About to resume music playing")
					targetItem.sendCommand("PLAY")
				}
			}			
			case "button_6_single": {
				var Number currentVolWohnzimmer = WZ_Sonos_Volume.state as DecimalType
				var Number newVolumeWohnzimmer = currentVolWohnzimmer + 2
				logInfo(logprefix_wohnzimmer, "changing volume in Wohnzimmer from " + currentVolWohnzimmer + " to " + newVolumeWohnzimmer)
				WZ_Sonos_Volume.sendCommand(newVolumeWohnzimmer)
				
				var Number currentVolKueche = Kueche_Sonos_Volume.state as DecimalType
				var Number newVolumeKueche = currentVolKueche + 2
				logInfo(logprefix_wohnzimmer, "changing volume in Küche from " + currentVolKueche + " to " + newVolumeKueche)
				Kueche_Sonos_Volume.sendCommand(newVolumeKueche)				
			}
			default: {
				targetItem.sendCommand(action)
			}
		}
	}
end