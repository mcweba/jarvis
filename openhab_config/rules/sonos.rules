import org.joda.time.*
import org.openhab.model.script.actions.Timer
import org.eclipse.smarthome.model.script.ScriptServiceUtil

rule "Levio Wallmote"
when
    Item WM01_Scene received update
then

	Levio_Sonos_Volume.sendCommand(4)

    logInfo("levio button", "Clearing Queue")
    Levio_Sonos_ClearQueue.sendCommand("ON")
    var int sceneNumber = WM01_Scene.state as DecimalType

    switch (sceneNumber) {
        case 1 : {
            logInfo("levio button", "Scene " + sceneNumber + " - Leo Lausemaus Weihnachten")
			Levio_Sonos_Playlist.sendCommand("Levio - Lausemaus Weihnachten")
        }
        case 1.1 :  { // long press
            logInfo("levio button", "Scene " + sceneNumber + " - Stop")
			Levio_Sonos_Stop.sendCommand(OFF)
        }		
		case 2 : {
            logInfo("levio button", "Scene " + sceneNumber + " - Leo Lausemaus Spotify")
            Levio_Sonos_Playlist.sendCommand("Levio - Lausemaus Spotify")
        }
        case 2.1 :  { // long press
            logInfo("levio button", "Scene " + sceneNumber + " - Stop")
			Levio_Sonos_Stop.sendCommand(OFF)
        }		
		case 3 : {
            logInfo("levio button", "Scene " + sceneNumber + " - Dinosaurier")
            Levio_Sonos_Playlist.sendCommand("Levio - Dinosaurier")
        }
        case 3.1 :  { // long press
            logInfo("levio button", "Scene " + sceneNumber + " - Stop")
			Levio_Sonos_Stop.sendCommand(OFF)
        }		
		case 4 : {
			Levio_Sonos_Volume.sendCommand(10)
            logInfo("levio button", "Scene " + sceneNumber + " - Feldberger Hof")
            Levio_Sonos_Playlist.sendCommand("Levio - Feldbergerhof")
        }
        case 4.1 :  { // long press
            logInfo("levio button", "Scene " + sceneNumber + " - Stop")
			Levio_Sonos_Stop.sendCommand(OFF)
        }		
    }

	createTimer(now.plusMinutes(45)) [|
	 	logInfo("levio button", "Sleep Timer reached")
	    Levio_Sonos_Stop.sendCommand(OFF)
	]
end

rule "Wohnzimmer music control"
when
    Item Aqara_Opple_Action received update
then

	var actionOriginal = Aqara_Opple_Action.state.toString

	if(actionOriginal.contains("release")) return

	var target = transform("MAP", "aqara_opple_wohnzimmer_items.map", actionOriginal)
	val GenericItem targetItem = ScriptServiceUtil.getItemRegistry?.getItem(target) as GenericItem

	var action = transform("MAP", "aqara_opple_wohnzimmer_actions.map", actionOriginal)
	if(action != "" && targetItem !== null){
		logInfo("sonos.rules", "target: " + targetItem.name + ", action: " + action)	
		
		switch Aqara_Opple_Action.state.toString
		{
			case "button_5_single": {
				var Number currentVolWohnzimmer = WZ_Sonos_Volume.state as DecimalType
				var Number newVolumeWohnzimmer = currentVolWohnzimmer - 2
				logInfo("sonos.rules", "changing volume in Wohnzimmer from " + currentVolWohnzimmer + " to " + newVolumeWohnzimmer)
				WZ_Sonos_Volume.sendCommand(newVolumeWohnzimmer)
				
				var Number currentVolKueche = Kueche_Sonos_Volume.state as DecimalType
				var Number newVolumeKueche = currentVolKueche - 2
				logInfo("sonos.rules", "changing volume in Küche from " + currentVolKueche + " to " + newVolumeKueche)
				Kueche_Sonos_Volume.sendCommand(newVolumeKueche)
			}
			case "button_5_hold": {
				if (WZ_Sonos_State.state == "PLAYING") {
					logInfo("sonos.rules", "About to pause the music")
					targetItem.sendCommand("PAUSE")
				} else if (WZ_Sonos_State.state == "PAUSED_PLAYBACK"){
					logInfo("sonos.rules", "About to resume music playing")
					targetItem.sendCommand("PLAY")
				}
			}			
			case "button_6_single": {
				var Number currentVolWohnzimmer = WZ_Sonos_Volume.state as DecimalType
				var Number newVolumeWohnzimmer = currentVolWohnzimmer + 2
				logInfo("sonos.rules", "changing volume in Wohnzimmer from " + currentVolWohnzimmer + " to " + newVolumeWohnzimmer)
				WZ_Sonos_Volume.sendCommand(newVolumeWohnzimmer)
				
				var Number currentVolKueche = Kueche_Sonos_Volume.state as DecimalType
				var Number newVolumeKueche = currentVolKueche + 2
				logInfo("sonos.rules", "changing volume in Küche from " + currentVolKueche + " to " + newVolumeKueche)
				Kueche_Sonos_Volume.sendCommand(newVolumeKueche)				
			}
			default: {
				targetItem.sendCommand(action)
			}
		}
	}
end